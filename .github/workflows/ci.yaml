name: ML Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run training pipeline tests
      run: |
        python -m pytest test_pipeline.py -v --tb=short
    
    - name: Train model for API tests
      run: |
        python train.py
    
    - name: Run API tests
      run: |
        python -m pytest test_api.py -v --tb=short
    
    - name: Check code quality with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --ignore=F824 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: trained-model
        path: |
          models/
        retention-days: 7

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true 
        tags: ml-pipeline:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name ml-test -p 8000:8000 ml-pipeline:latest        
        echo "Waiting for container to become ready..."
        for i in {1..10}; do
          sleep 5
          if curl -s http://localhost:8000/health; then
            echo "‚úÖ Container is responding on port 8000"
            break
          elif [ $i -eq 10 ]; then
            echo "‚ùå Container did not respond on port 8000 after waiting"
            docker logs test-container
            exit 1
          fi
        done
        docker stop ml-test

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Train model
      run: python train.py
    
    - name: Start API server
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      
    - name: Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test prediction endpoint
        curl -X POST "http://localhost:8000/predict" \
          -H "Content-Type: application/json" \
          -d '{"features": [0.1, -0.5, 1.2, 0.8, -1.1, 0.3, -0.7, 1.5, 0.2, -0.9]}'
        
        # Test batch prediction
        curl -X POST "http://localhost:8000/predict_batch" \
          -H "Content-Type: application/json" \
          -d '[[0.1, -0.5, 1.2, 0.8, -1.1, 0.3, -0.7, 1.5, 0.2, -0.9]]'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install safety
      run: pip install safety
    
    - name: Run safety check
      run: safety check -r requirements.txt

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy notification
      run: |
        echo "üöÄ Deploying to production environment"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
    
    # Add your deployment steps here
    # For example:
    # - Deploy to cloud provider
    # - Update container registry
    # - Notify monitoring systems
    
    - name: Post-deploy health check
      run: |
        echo "‚úÖ Deployment completed successfully"
        # Add actual health check for production endpoint